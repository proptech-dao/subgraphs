type AdminChanged @entity(immutable: true) {
  id: Bytes!
  previousAdmin: Bytes! # address
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeaconUpgraded @entity(immutable: true) {
  id: Bytes!
  beacon: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# event Mint(address indexed to, uint256 indexed tokenId, string uri);
type Minted @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! #address
  tokenId: BigInt!
  uri: String!
  transactionHash: Bytes!
}

type NFTRaw @entity(immutable: false) {
  id: Bytes!
  owner: Bytes! #address
  tokenId: BigInt!
  uri: String!
  transactionHash: Bytes!
}



type NFTListed @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  tokenId: BigInt! # uint256
  price: BigInt! # uint256
  paymentToken: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTPurchased @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  tokenId: BigInt! # uint256
  buyer: Bytes! # address
  price: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTUnlisted @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  
}


type NFTInMarket @entity(immutable: false) {
  id: Bytes!
  nftAddress: Bytes! # address,
  tokenId: BigInt! # uint256, token ID from HCT contract.
  paymentToken: Bytes! # address, ERC20 token used for payment.
  price: BigInt! # uint256, will be filled once the NFT is listed.
  buyer: Bytes # address, will be filled if the NFT was bought.
  transactionHash: Bytes
}

